<html>
	<title>An introduction on geographic coordinates</title>
	<meta name="keywords" content="Cartography, World Geodetic System, WGS84, GPS, Latitude, Longitude, Geographic Coordinates, Mercator, UTM, Projection, Geoid, Ellipsoid, datum, Tissot Indicatrix, easting, northing, zone, location, position, GDAL, EPSG">
	<body>
	<h1>An introduction on geographic coordinates</h1>
	Nowadays, anybody with a smartphone can find their exact position with just one click. Any location is determined by a specific pairing of <b>latitude</b> and <b>longitude</b> in a Cartesian coordinate ellipsoid-based grid.<br>

	The actual shape of the Earth is an irregular figure called a <b>geoid</b> but it can be approximated (at sea level) to a mathematical <b>ellipsoid</b> called a <b>datum</b>.<br>
	The more recent and precise version of the global datum is the World Geodetic System <b>WGS84</b> (established in 1984 and revised in 2004), although there are also some local datums such as the European ED50.<br>



	<h3>
		What is a map projection?
	</h3>
Although some <a href=https://en.wikipedia.org/wiki/Modern_flat_Earth_societies target=_blank>people</a> today still think otherwise, our planet is not flat, so any attempt to represent the Earth on a plane needs some kind of transformation, known as map projection.<br>
	In this process, there is always a compromise between the properties that get preserved and others that get deformed, any map projection therefore always has some kind of distortion. The <b>Tissot's Indicatrix</b> is a plot that contains circles at grid intersections and shows how they vary due to distortion<br> Depending on what the map is needed for, one projection may be better than another, and there are lots of different map projections that can be classified by two main criteria:
	
<ul><li>By the <b><i>surface</i></b> used: <br>Depending on the surface onto which the globe is projected, map projections can be <b>cylindrical, conic</b> or <b>azimuthal</b> (uses a plane).</li>
		<li>By the <b><i>property</i></b> preserved: <br>Depending on which metric is preserved, projections can be <b>equal-area, equidistant</b> or <b>conformal</b> (angles preserved).</li></ul>
One of the most common projections used in the wind energy industry is the Universal Transverse Mercator (UTM).
<p> <div align=center>
		 <img src=../vortex/img/Tissot_mercator.png width=50%><br><font size=2>Tissot's Indicatrix for Mercator projection</font></td>
</div>

<h3>The Universal Transverse Mercator (UTM) projection:</h3>
			The Mercator map projection was created by Gerardus Mercator in 1569. This projection is cylindrical and conformal, so local angles are preserved and local circles are not deformed. Distortion is constant along any parallel and constant bearings (rhumb lines) are straight lines. The map extends infinitely north and south. This is the projection used in Google Maps and by extension, all websites fed by them, including <a href=http://interface.vortex.es>Vortex interface</a><p>

The Universal Transverse Mercator however, is not a single map projection but a system that divides the Earth into sixty zones, each being a six-degree band of longitude (numbered from 01 to 60, west to east). These bands are divided into cells eight-degrees high of latitude (specified by a letter from A to X, south to north, with N being the first letter north of the equator.)<p>

A position on the Earth is given by the UTM <b>zone number</b> and the <b>easting</b> (x Cartesian coordinate) and <b>northing</b> (y coordinate) in that zone. 
<p><div align=center>		
<a href=../vortex/Utm-zones.jpg><img src=../vortex/img/Utm-zones.jpg width=70% border=0></a><br><center><font size=2>The zones in the Universal Transverse Mercator system</font>
</div>

<H3>How to convert UTM to geographic coordinates (and viceversa):</H3>
UTM coordinates can be transformed to geographic coordinates using several mathematical equations. For brevity purposes, these formulae are not reproduced here but can be looked up at the <a href=https://link.springer.com/article/10.1007%2Fs00190-011-0445-3>Journal of Geodesy</a>.

For the sake of convenience, the form below calls a JavasScript code (thanks to <a href=http://home.hiwaay.net/~taylorc/>Chuck Taylor</a>) that solve these equations. Geographic coordinates are entered and displayed in decimal degrees. Negative numbers indicate West longitudes and South latitudes. UTM coordinates are entered and displayed in meters. The ellipsoid model used for computations is WGS84.<p>

<script type="text/javascript">
    <!--

    var pi = 3.14159265358979;

    /* Ellipsoid model constants (actual values here are for WGS84) */
    var sm_a = 6378137.0;
    var sm_b = 6356752.314;
    var sm_EccSquared = 6.69437999013e-03;

    var UTMScaleFactor = 0.9996;


    /*
    * DegToRad
    *
    * Converts degrees to radians.
    *
    */
    function DegToRad (deg)
    {
        return (deg / 180.0 * pi)
    }




    /*
    * RadToDeg
    *
    * Converts radians to degrees.
    *
    */
    function RadToDeg (rad)
    {
        return (rad / pi * 180.0)
    }




    /*
    * ArcLengthOfMeridian
    *
    * Computes the ellipsoidal distance from the equator to a point at a
    * given latitude.
    *
    * Reference: Hoffmann-Wellenhof, B., Lichtenegger, H., and Collins, J.,
    * GPS: Theory and Practice, 3rd ed.  New York: Springer-Verlag Wien, 1994.
    *
    * Inputs:
    *     phi - Latitude of the point, in radians.
    *
    * Globals:
    *     sm_a - Ellipsoid model major axis.
    *     sm_b - Ellipsoid model minor axis.
    *
    * Returns:
    *     The ellipsoidal distance of the point from the equator, in meters.
    *
    */
    function ArcLengthOfMeridian (phi)
    {
        var alpha, beta, gamma, delta, epsilon, n;
        var result;

        /* Precalculate n */
        n = (sm_a - sm_b) / (sm_a + sm_b);

        /* Precalculate alpha */
        alpha = ((sm_a + sm_b) / 2.0)
           * (1.0 + (Math.pow (n, 2.0) / 4.0) + (Math.pow (n, 4.0) / 64.0));

        /* Precalculate beta */
        beta = (-3.0 * n / 2.0) + (9.0 * Math.pow (n, 3.0) / 16.0)
           + (-3.0 * Math.pow (n, 5.0) / 32.0);

        /* Precalculate gamma */
        gamma = (15.0 * Math.pow (n, 2.0) / 16.0)
            + (-15.0 * Math.pow (n, 4.0) / 32.0);
    
        /* Precalculate delta */
        delta = (-35.0 * Math.pow (n, 3.0) / 48.0)
            + (105.0 * Math.pow (n, 5.0) / 256.0);
    
        /* Precalculate epsilon */
        epsilon = (315.0 * Math.pow (n, 4.0) / 512.0);
    
    /* Now calculate the sum of the series and return */
    result = alpha
        * (phi + (beta * Math.sin (2.0 * phi))
            + (gamma * Math.sin (4.0 * phi))
            + (delta * Math.sin (6.0 * phi))
            + (epsilon * Math.sin (8.0 * phi)));

    return result;
    }



    /*
    * UTMCentralMeridian
    *
    * Determines the central meridian for the given UTM zone.
    *
    * Inputs:
    *     zone - An integer value designating the UTM zone, range [1,60].
    *
    * Returns:
    *   The central meridian for the given UTM zone, in radians, or zero
    *   if the UTM zone parameter is outside the range [1,60].
    *   Range of the central meridian is the radian equivalent of [-177,+177].
    *
    */
    function UTMCentralMeridian (zone)
    {
        var cmeridian;

        cmeridian = DegToRad (-183.0 + (zone * 6.0));
    
        return cmeridian;
    }



    /*
    * FootpointLatitude
    *
    * Computes the footpoint latitude for use in converting transverse
    * Mercator coordinates to ellipsoidal coordinates.
    *
    * Reference: Hoffmann-Wellenhof, B., Lichtenegger, H., and Collins, J.,
    *   GPS: Theory and Practice, 3rd ed.  New York: Springer-Verlag Wien, 1994.
    *
    * Inputs:
    *   y - The UTM northing coordinate, in meters.
    *
    * Returns:
    *   The footpoint latitude, in radians.
    *
    */
    function FootpointLatitude (y)
    {
        var y_, alpha_, beta_, gamma_, delta_, epsilon_, n;
        var result;
        
        /* Precalculate n (Eq. 10.18) */
        n = (sm_a - sm_b) / (sm_a + sm_b);
        	
        /* Precalculate alpha_ (Eq. 10.22) */
        /* (Same as alpha in Eq. 10.17) */
        alpha_ = ((sm_a + sm_b) / 2.0)
            * (1 + (Math.pow (n, 2.0) / 4) + (Math.pow (n, 4.0) / 64));
        
        /* Precalculate y_ (Eq. 10.23) */
        y_ = y / alpha_;
        
        /* Precalculate beta_ (Eq. 10.22) */
        beta_ = (3.0 * n / 2.0) + (-27.0 * Math.pow (n, 3.0) / 32.0)
            + (269.0 * Math.pow (n, 5.0) / 512.0);
        
        /* Precalculate gamma_ (Eq. 10.22) */
        gamma_ = (21.0 * Math.pow (n, 2.0) / 16.0)
            + (-55.0 * Math.pow (n, 4.0) / 32.0);
        	
        /* Precalculate delta_ (Eq. 10.22) */
        delta_ = (151.0 * Math.pow (n, 3.0) / 96.0)
            + (-417.0 * Math.pow (n, 5.0) / 128.0);
        	
        /* Precalculate epsilon_ (Eq. 10.22) */
        epsilon_ = (1097.0 * Math.pow (n, 4.0) / 512.0);
        	
        /* Now calculate the sum of the series (Eq. 10.21) */
        result = y_ + (beta_ * Math.sin (2.0 * y_))
            + (gamma_ * Math.sin (4.0 * y_))
            + (delta_ * Math.sin (6.0 * y_))
            + (epsilon_ * Math.sin (8.0 * y_));
        
        return result;
    }



    /*
    * MapLatLonToXY
    *
    * Converts a latitude/longitude pair to x and y coordinates in the
    * Transverse Mercator projection.  Note that Transverse Mercator is not
    * the same as UTM; a scale factor is required to convert between them.
    *
    * Reference: Hoffmann-Wellenhof, B., Lichtenegger, H., and Collins, J.,
    * GPS: Theory and Practice, 3rd ed.  New York: Springer-Verlag Wien, 1994.
    *
    * Inputs:
    *    phi - Latitude of the point, in radians.
    *    lambda - Longitude of the point, in radians.
    *    lambda0 - Longitude of the central meridian to be used, in radians.
    *
    * Outputs:
    *    xy - A 2-element array containing the x and y coordinates
    *         of the computed point.
    *
    * Returns:
    *    The function does not return a value.
    *
    */
    function MapLatLonToXY (phi, lambda, lambda0, xy)
    {
        var N, nu2, ep2, t, t2, l;
        var l3coef, l4coef, l5coef, l6coef, l7coef, l8coef;
        var tmp;

        /* Precalculate ep2 */
        ep2 = (Math.pow (sm_a, 2.0) - Math.pow (sm_b, 2.0)) / Math.pow (sm_b, 2.0);
    
        /* Precalculate nu2 */
        nu2 = ep2 * Math.pow (Math.cos (phi), 2.0);
    
        /* Precalculate N */
        N = Math.pow (sm_a, 2.0) / (sm_b * Math.sqrt (1 + nu2));
    
        /* Precalculate t */
        t = Math.tan (phi);
        t2 = t * t;
        tmp = (t2 * t2 * t2) - Math.pow (t, 6.0);

        /* Precalculate l */
        l = lambda - lambda0;
    
        /* Precalculate coefficients for l**n in the equations below
           so a normal human being can read the expressions for easting
           and northing
           -- l**1 and l**2 have coefficients of 1.0 */
        l3coef = 1.0 - t2 + nu2;
    
        l4coef = 5.0 - t2 + 9 * nu2 + 4.0 * (nu2 * nu2);
    
        l5coef = 5.0 - 18.0 * t2 + (t2 * t2) + 14.0 * nu2
            - 58.0 * t2 * nu2;
    
        l6coef = 61.0 - 58.0 * t2 + (t2 * t2) + 270.0 * nu2
            - 330.0 * t2 * nu2;
    
        l7coef = 61.0 - 479.0 * t2 + 179.0 * (t2 * t2) - (t2 * t2 * t2);
    
        l8coef = 1385.0 - 3111.0 * t2 + 543.0 * (t2 * t2) - (t2 * t2 * t2);
    
        /* Calculate easting (x) */
        xy[0] = N * Math.cos (phi) * l
            + (N / 6.0 * Math.pow (Math.cos (phi), 3.0) * l3coef * Math.pow (l, 3.0))
            + (N / 120.0 * Math.pow (Math.cos (phi), 5.0) * l5coef * Math.pow (l, 5.0))
            + (N / 5040.0 * Math.pow (Math.cos (phi), 7.0) * l7coef * Math.pow (l, 7.0));
    
        /* Calculate northing (y) */
        xy[1] = ArcLengthOfMeridian (phi)
            + (t / 2.0 * N * Math.pow (Math.cos (phi), 2.0) * Math.pow (l, 2.0))
            + (t / 24.0 * N * Math.pow (Math.cos (phi), 4.0) * l4coef * Math.pow (l, 4.0))
            + (t / 720.0 * N * Math.pow (Math.cos (phi), 6.0) * l6coef * Math.pow (l, 6.0))
            + (t / 40320.0 * N * Math.pow (Math.cos (phi), 8.0) * l8coef * Math.pow (l, 8.0));
    
        return;
    }
    
    
    
    /*
    * MapXYToLatLon
    *
    * Converts x and y coordinates in the Transverse Mercator projection to
    * a latitude/longitude pair.  Note that Transverse Mercator is not
    * the same as UTM; a scale factor is required to convert between them.
    *
    * Reference: Hoffmann-Wellenhof, B., Lichtenegger, H., and Collins, J.,
    *   GPS: Theory and Practice, 3rd ed.  New York: Springer-Verlag Wien, 1994.
    *
    * Inputs:
    *   x - The easting of the point, in meters.
    *   y - The northing of the point, in meters.
    *   lambda0 - Longitude of the central meridian to be used, in radians.
    *
    * Outputs:
    *   philambda - A 2-element containing the latitude and longitude
    *               in radians.
    *
    * Returns:
    *   The function does not return a value.
    *
    * Remarks:
    *   The local variables Nf, nuf2, tf, and tf2 serve the same purpose as
    *   N, nu2, t, and t2 in MapLatLonToXY, but they are computed with respect
    *   to the footpoint latitude phif.
    *
    *   x1frac, x2frac, x2poly, x3poly, etc. are to enhance readability and
    *   to optimize computations.
    *
    */
    function MapXYToLatLon (x, y, lambda0, philambda)
    {
        var phif, Nf, Nfpow, nuf2, ep2, tf, tf2, tf4, cf;
        var x1frac, x2frac, x3frac, x4frac, x5frac, x6frac, x7frac, x8frac;
        var x2poly, x3poly, x4poly, x5poly, x6poly, x7poly, x8poly;
    	
        /* Get the value of phif, the footpoint latitude. */
        phif = FootpointLatitude (y);
        	
        /* Precalculate ep2 */
        ep2 = (Math.pow (sm_a, 2.0) - Math.pow (sm_b, 2.0))
              / Math.pow (sm_b, 2.0);
        	
        /* Precalculate cos (phif) */
        cf = Math.cos (phif);
        	
        /* Precalculate nuf2 */
        nuf2 = ep2 * Math.pow (cf, 2.0);
        	
        /* Precalculate Nf and initialize Nfpow */
        Nf = Math.pow (sm_a, 2.0) / (sm_b * Math.sqrt (1 + nuf2));
        Nfpow = Nf;
        	
        /* Precalculate tf */
        tf = Math.tan (phif);
        tf2 = tf * tf;
        tf4 = tf2 * tf2;
        
        /* Precalculate fractional coefficients for x**n in the equations
           below to simplify the expressions for latitude and longitude. */
        x1frac = 1.0 / (Nfpow * cf);
        
        Nfpow *= Nf;   /* now equals Nf**2) */
        x2frac = tf / (2.0 * Nfpow);
        
        Nfpow *= Nf;   /* now equals Nf**3) */
        x3frac = 1.0 / (6.0 * Nfpow * cf);
        
        Nfpow *= Nf;   /* now equals Nf**4) */
        x4frac = tf / (24.0 * Nfpow);
        
        Nfpow *= Nf;   /* now equals Nf**5) */
        x5frac = 1.0 / (120.0 * Nfpow * cf);
        
        Nfpow *= Nf;   /* now equals Nf**6) */
        x6frac = tf / (720.0 * Nfpow);
        
        Nfpow *= Nf;   /* now equals Nf**7) */
        x7frac = 1.0 / (5040.0 * Nfpow * cf);
        
        Nfpow *= Nf;   /* now equals Nf**8) */
        x8frac = tf / (40320.0 * Nfpow);
        
        /* Precalculate polynomial coefficients for x**n.
           -- x**1 does not have a polynomial coefficient. */
        x2poly = -1.0 - nuf2;
        
        x3poly = -1.0 - 2 * tf2 - nuf2;
        
        x4poly = 5.0 + 3.0 * tf2 + 6.0 * nuf2 - 6.0 * tf2 * nuf2
        	- 3.0 * (nuf2 *nuf2) - 9.0 * tf2 * (nuf2 * nuf2);
        
        x5poly = 5.0 + 28.0 * tf2 + 24.0 * tf4 + 6.0 * nuf2 + 8.0 * tf2 * nuf2;
        
        x6poly = -61.0 - 90.0 * tf2 - 45.0 * tf4 - 107.0 * nuf2
        	+ 162.0 * tf2 * nuf2;
        
        x7poly = -61.0 - 662.0 * tf2 - 1320.0 * tf4 - 720.0 * (tf4 * tf2);
        
        x8poly = 1385.0 + 3633.0 * tf2 + 4095.0 * tf4 + 1575 * (tf4 * tf2);
        	
        /* Calculate latitude */
        philambda[0] = phif + x2frac * x2poly * (x * x)
        	+ x4frac * x4poly * Math.pow (x, 4.0)
        	+ x6frac * x6poly * Math.pow (x, 6.0)
        	+ x8frac * x8poly * Math.pow (x, 8.0);
        	
        /* Calculate longitude */
        philambda[1] = lambda0 + x1frac * x
        	+ x3frac * x3poly * Math.pow (x, 3.0)
        	+ x5frac * x5poly * Math.pow (x, 5.0)
        	+ x7frac * x7poly * Math.pow (x, 7.0);
        	
        return;
    }




    /*
    * LatLonToUTMXY
    *
    * Converts a latitude/longitude pair to x and y coordinates in the
    * Universal Transverse Mercator projection.
    *
    * Inputs:
    *   lat - Latitude of the point, in radians.
    *   lon - Longitude of the point, in radians.
    *   zone - UTM zone to be used for calculating values for x and y.
    *          If zone is less than 1 or greater than 60, the routine
    *          will determine the appropriate zone from the value of lon.
    *
    * Outputs:
    *   xy - A 2-element array where the UTM x and y values will be stored.
    *
    * Returns:
    *   The UTM zone used for calculating the values of x and y.
    *
    */
    function LatLonToUTMXY (lat, lon, zone, xy)
    {
        MapLatLonToXY (lat, lon, UTMCentralMeridian (zone), xy);

        /* Adjust easting and northing for UTM system. */
        xy[0] = xy[0] * UTMScaleFactor + 500000.0;
        xy[1] = xy[1] * UTMScaleFactor;
        if (xy[1] < 0.0)
            xy[1] = xy[1] + 10000000.0;

        return zone;
    }
    
    
    
    /*
    * UTMXYToLatLon
    *
    * Converts x and y coordinates in the Universal Transverse Mercator
    * projection to a latitude/longitude pair.
    *
    * Inputs:
    *	x - The easting of the point, in meters.
    *	y - The northing of the point, in meters.
    *	zone - The UTM zone in which the point lies.
    *	southhemi - True if the point is in the southern hemisphere;
    *               false otherwise.
    *
    * Outputs:
    *	latlon - A 2-element array containing the latitude and
    *            longitude of the point, in radians.
    *
    * Returns:
    *	The function does not return a value.
    *
    */
    function UTMXYToLatLon (x, y, zone, southhemi, latlon)
    {
        var cmeridian;
        	
        x -= 500000.0;
        x /= UTMScaleFactor;
        	
        /* If in southern hemisphere, adjust y accordingly. */
        if (southhemi)
        y -= 10000000.0;
        		
        y /= UTMScaleFactor;
        
        cmeridian = UTMCentralMeridian (zone);
        MapXYToLatLon (x, y, cmeridian, latlon);
        	
        return;
    }
    



    /*
    * btnToUTM_OnClick
    *
    * Called when the btnToUTM button is clicked.
    *
    */
    function btnToUTM_OnClick ()
    {
        var xy = new Array(2);
        
        if (isNaN (parseFloat (document.frmConverter.txtLongitude.value))) {
            alert ("Please enter a valid longitude in the lon field.");
            return false;
        }

        lon = parseFloat (document.frmConverter.txtLongitude.value);

        if ((lon < -180.0) || (180.0 <= lon)) {
            alert ("The longitude you entered is out of range.  " +
                   "Please enter a number in the range [-180, 180).");
            return false;
        }

        if (isNaN (parseFloat (document.frmConverter.txtLatitude.value))) {
            alert ("Please enter a valid latitude in the lat field.");
            return false;
        }

        lat = parseFloat (document.frmConverter.txtLatitude.value);

        if ((lat < -90.0) || (90.0 < lat)) {
            alert ("The latitude you entered is out of range.  " +
                   "Please enter a number in the range [-90, 90].");
            return false;
        }

        // Compute the UTM zone.
        zone = Math.floor ((lon + 180.0) / 6) + 1;

        zone = LatLonToUTMXY (DegToRad (lat), DegToRad (lon), zone, xy);

        /* Set the output controls.  */
        document.frmConverter.txtX.value = xy[0];
        document.frmConverter.txtY.value = xy[1];
        document.frmConverter.txtZone.value = zone;
        if (lat < 0)
            // Set the S button.
            document.frmConverter.rbtnHemisphere[1].checked = true;
        else
            // Set the N button.
            document.frmConverter.rbtnHemisphere[0].checked = true;
        

        return true;
    }


    /*
    * btnToGeographic_OnClick
    *
    * Called when the btnToGeographic button is clicked.
    *
    */
    function btnToGeographic_OnClick ()
    {                                  
        latlon = new Array(2);
        var x, y, zone, southhemi;
        
        if (isNaN (parseFloat (document.frmConverter.txtX.value))) {
            alert ("Please enter a valid easting in the x field.");
            return false;
        }

        x = parseFloat (document.frmConverter.txtX.value);

        if (isNaN (parseFloat (document.frmConverter.txtY.value))) {
            alert ("Please enter a valid northing in the y field.");
            return false;
        }

        y = parseFloat (document.frmConverter.txtY.value);

        if (isNaN (parseInt (document.frmConverter.txtZone.value))) {
            alert ("Please enter a valid UTM zone in the zone field.");
            return false;
        }

        zone = parseFloat (document.frmConverter.txtZone.value);

        if ((zone < 1) || (60 < zone)) {
            alert ("The UTM zone you entered is out of range.  " +
                   "Please enter a number in the range [1, 60].");
            return false;
        }
        
        if (document.frmConverter.rbtnHemisphere[1].checked == true)
            southhemi = true;
        else
            southhemi = false;

        UTMXYToLatLon (x, y, zone, southhemi, latlon);
        
        document.frmConverter.txtLongitude.value = RadToDeg (latlon[1]);
        document.frmConverter.txtLatitude.value = RadToDeg (latlon[0]);

        return true;
    }

    //    -->



</script>

<!-- Not really a script, but a message for non-JavaScript browsers -->
<SCRIPT TYPE="text/javascript">

    <!-- -->  <HR>
    <!-- -->  <P ALIGN=center><STRONG>Your browser does not appear to
    <!-- -->  support JavaScript.
    <!-- -->  <BR>Unfortunately, this form will not be useful to you
    <!-- -->  without a browser that supports JavaScript.</STRONG></P>
    <!-- -->  <HR>

    <!--
    if (0 < navigator.userAgent.indexOf ("Opera/3")) {
        document.write ("<HR><P ALIGN=center><BIG>Opera 3.x"
            + " Warning</BIG></P>");
        document.write ("<P>Versions 3.0 through 3.51 of the Opera Web"
            + " browser contain flaws that prevent the hemisphere"
            + " indication and designation from working properly."
            + " It is recommended that you use another browser to"
            + " view and use this page.<HR>");
    }
    //    -->

</SCRIPT>


<FORM NAME="frmConverter" onSubmit="0">
<div class="padded-boxes">
    <section>
        <h4 class="heading">Geographic (decimal degrees)</h4>
        <div class="padded">
<p>
Lon: <INPUT TYPE=text SIZE=15 NAME="txtLongitude" VALUE=""><br>
Lat: <INPUT TYPE=text SIZE=15 NAME="txtLatitude" VALUE="">
<p>
<INPUT TYPE=button SIZE=8 NAME=btnToUTM VALUE="Convert to UTM " onClick="btnToUTM_OnClick ()">

</div>
</section>

    <section>
        <h4 class="heading">UTM</h4>
<div class="padded">
X (Easting): <INPUT TYPE=text SIZE=15 NAME="txtX" VALUE=""><br>
Y (Northing): <INPUT TYPE=text SIZE=15 NAME="txtY" VALUE=""><br>
Zone: <INPUT TYPE=text SIZE=4 NAME="txtZone" VALUE="">  
Hemisphere: 
<INPUT TYPE=radio NAME="rbtnHemisphere" VALUE="N" CHECKED OnClick="0">N
<INPUT TYPE=radio NAME="rbtnHemisphere" VALUE="S" OnClick="0">S
<p>
<INPUT TYPE=button SIZE=8 NAME=btnToGeographic VALUE="Convert to Geographic "  onClick="btnToGeographic_OnClick ()">
</div>
</section>
</div>

</form>



<!-- Header row -->
<!--
<div class="CENTER">
<FORM NAME="frmConverter" onSubmit="0">
<table><tr>
<Td COLSPAN=2 ALIGN=center>Geographic<BR>(<EM>degrees decimal</EM>)</TH>
<Td ALIGN=center>To/From</TH>
<Td COLSPAN=2 ALIGN=center>UTM</TH>
</TR>

<!-- Easting row (plus command button) -->
<!-- The size attribute for the button input keeps the control
     from looking too bad on browsers that don't support buttons
     (even though the control is useless in this case).
     The &gt; code is used for browsers that will interpret the
     first right angle bracket in the VALUE field as the tag
     terminator. -->
<!--
<TR>
<TD ALIGN=right>lon</TD>
<TD><INPUT TYPE=text SIZE=15 NAME="txtLongitude" VALUE=""></TD>
<TD ALIGN=center><INPUT TYPE=button SIZE=4 NAME=btnToUTM VALUE="&gt;&gt;"
    onClick="btnToUTM_OnClick ()"> </TD>
<TD ALIGN=right>x (easting)</TD>
<TD><INPUT TYPE=text SIZE=15 NAME="txtX" VALUE=""></TD>
</TR>


<!-- Northing row (plus command button) -->
<!--
<TR>
<TD ALIGN=right>lat</TD>
<TD><INPUT TYPE=text SIZE=15 NAME="txtLatitude" VALUE=""></TD>
<TD ALIGN=center><INPUT TYPE=button SIZE=4 NAME=btnToGeographic VALUE="<<"
    onClick="btnToGeographic_OnClick ()"></TD>
<TD ALIGN=right>y (northing)</TD>
<TD><INPUT TYPE=text SIZE=15 NAME="txtY" VALUE=""></TD>
</TR>


<!-- UTM zone row -->
<!--
<TR>
<TD COLSPAN=3></TD>
<TD ALIGN=right>zone</TD>
<TD><INPUT TYPE=text SIZE=4 NAME="txtZone" VALUE=""></TD>
</TR>


<!-- Hemisphere row -->
<!--
<TR>
<TD COLSPAN=3></TD>
<TD COLSPAN=2>
    hemisphere                                 
    <!-- OnClick properties circumvent a Netscape bug that reverses
         the indices of the buttons -->
<!--
    <INPUT TYPE=radio NAME="rbtnHemisphere" VALUE="N" CHECKED OnClick="0">N
    <INPUT TYPE=radio NAME="rbtnHemisphere" VALUE="S" OnClick="0">S
</TD>
</TR>
</TABLE>
</FORM>
</DIV>
-->
<p>
Another way to transform geographic coordinates to UTM is by using the Geospatial Data Abstraction Library (<a href=https://www.gdal.org/>GDAL</a>). This <a href=link Oriol?>Open Source</a> library can transform any coordinate system referenced to any datum. A couple of UTM coordinates (utmx, utmy) can be converted to a geographical latitude and longitude by typing:

<pre>
> gdaltransform -s_srs EPSG:ZONE -t_srs EPSG:4326 utmx utmy
</pre>

Where the parameter ZONE depends on the UTM zone and can be obtained from <a href=http://spatialreference.org target=_blank>http://spatialreference.org</a>

<p><center><br><p>
	<font size=2>2019 &copy; Vortex </font>
